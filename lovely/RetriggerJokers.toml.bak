[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# main joker retriggering
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "card_eval_status_text(_card, 'jokers', nil, percent, nil, effects.jokers)"
position = "after"
payload = '''
if effects.jokers.joker_repetitions then
    rep_list = effects.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end

                local ef = eval_card(_card, {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, joker_main = true, retrigger_joker = true})

                --Any Joker effects
                if ef.jokers then 
                    local extras = {mult = false, hand_chips = false}
                    if ef.jokers.mult_mod then mult = mod_mult(mult + ef.jokers.mult_mod);extras.mult = true end
                    if ef.jokers.chip_mod then hand_chips = mod_chips(hand_chips + ef.jokers.chip_mod);extras.hand_chips = true end
                    if ef.jokers.Xmult_mod then mult = mod_mult(mult*ef.jokers.Xmult_mod);extras.mult = true  end
                    if ef.jokers.Emult_mod then mult = mod_mult(mult^ef.jokers.Emult_mod);extras.mult = true  end
                    if ef.jokers.EEmult_mod then mult = mod_mult(mult:arrow(2, ef.jokers.EEmult_mod));extras.mult = true  end
                    if ef.jokers.EEEmult_mod then mult = mod_mult(mult:arrow(3, ef.jokers.EEEmult_mod));extras.mult = true  end
                    if ef.jokers.Hmult_mod and type(ef.jokers.Hmult) == 'table' then mult = mod_mult(mult:arrow(ef.jokers.Hmult_mod[1], ef.jokers.Hmult_mod[2]));extras.mult = true  end
                    if ef.jokers.Xchip_mod then hand_chips = mod_chips(hand_chips*ef.jokers.Xchip_mod);extras.hand_chips = true  end
                    if ef.jokers.Echip_mod then hand_chips = mod_chips(hand_chips^ef.jokers.Echip_mod);extras.hand_chips = true  end
                    if ef.jokers.EEchip_mod then hand_chips = mod_chips(hand_chips:arrow(2, ef.jokers.EEchip_mod));extras.hand_chips = true  end
                    if ef.jokers.EEEchip_mod then hand_chips = mod_chips(hand_chips:arrow(3, ef.jokers.EEEchip_mod));extras.hand_chips = true  end
                    if ef.jokers.Hchip_mod and type(ef.jokers.Hchip_mod) == 'table' then hand_chips = mod_chips(hand_chips:arrow(ef.jokers.Hchip_mod[1], ef.jokers.Hchip_mod[2]));extras.hand_chips = true  end
                    update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult})
                    card_eval_status_text(_card, 'jokers', nil, percent, nil, effects.jokers)
                    --Exponentia
                    if ef.jokers.Xmult_mod and ef.jokers.Xmult_mod ~= 1 and next(find_joker("cry-Exponentia")) then
                        for _, v in pairs(find_joker("cry-Exponentia")) do
                            v.ability.extra.Emult = v.ability.extra.Emult + v.ability.extra.Emult_mod
                            card_eval_status_text(v, 'extra', nil, nil, nil, {message = "^"..v.ability.extra.Emult.." Mult"})
                        end
                    end
                    if percent then percent = percent+percent_delta end
                end
            end
        end
    end
end
'''
match_indent = true


# End of round retriggering from jokers
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = eval_card(G.jokers.cards[j], {cardarea = G.hand, other_card = G.hand.cards[i], repetition = true, end_of_round = true, card_effects = effects})"
position = "after"
payload = '''
if eval and eval.jokers and eval.jokers.joker_repetitions then
    rep_list = eval.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                for s=1, eval.jokers.repetitions do
                    reps[#reps+1] = {from_retrigger = rep_list[z]}
                    for k, v in pairs(eval) do
                        reps[#reps][k] = v
                    end
                end
            end
        end
    end
end
'''
match_indent = true


# Destroying cards
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = destroyed_cards})"
position = "at"
payload = '''
local eval = eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = destroyed_cards})
if eval and eval.jokers and eval.jokers.joker_repetitions then
    rep_list = eval.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = destroyed_cards, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = cards_destroyed})"
position = "at"
payload = '''
local eval = eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = cards_destroyed})
if eval and eval.jokers and eval.jokers.joker_repetitions then
    rep_list = eval.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = cards_destroyed, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# Retrigger retriggering jokers
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = eval_card(G.jokers.cards[j], {cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = scoring_hand[i], repetition = true})"
position = "after"
payload = '''
if eval and eval.jokers and eval.jokers.repetitions and eval.jokers.joker_repetitions then
    rep_list = eval.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                for s=1, eval.jokers.repetitions do
                    reps[#reps+1] = {from_retrigger = rep_list[z]}
                    for k, v in pairs(eval) do
                        reps[#reps][k] = v
                    end
                end
            end
        end
    end
end
if eval and eval.jokers and not eval.jokers.repetitions then eval.jokers = nil end
'''
match_indent = true


# Pre-round effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effects = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before = true})"
position = "after"
payload = '''
if effects and effects.jokers and effects.jokers.joker_repetitions then
    rep_list = effects.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ef = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before = true, retrigger_joker = true})
                if ef.jokers then
                    card_eval_status_text(G.jokers.cards[i], 'jokers', nil, percent, nil, effects.jokers)
                    if percent then percent = percent + percent_delta end
                    if ef.jokers.level_up then
                        level_up_hand(G.jokers.cards[i], text)
                    end
                end
            end
        end
    end
end
'''
match_indent = true


# Retrigger retriggering jokers
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = eval_card(G.jokers.cards[j], {cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = G.hand.cards[i], repetition = true, card_effects = effects})"
position = "after"
payload = '''
if eval and eval.jokers and eval.jokers.repetitions and eval.jokers.joker_repetitions then
    rep_list = eval.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                for s=1, eval.jokers.repetitions do
                    reps[#reps+1] = {from_retrigger = rep_list[z]}
                    for k, v in pairs(eval) do
                        reps[#reps][k] = v
                    end
                end
            end
        end
    end
end
if eval and eval.jokers and not eval.jokers.repetitions then eval.jokers = nil end
'''
match_indent = true


# Debuffed cards
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effects = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, debuffed_hand = true})"
position = "after"
payload = '''
if effects and effects.jokers and effects.jokers.joker_repetitions then
    rep_list = effects.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ef = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, debuffed_hand = true, retrigger_joker = true})

                --Any Joker effects
                if ef.jokers then
                    card_eval_status_text(G.jokers.cards[i], 'jokers', nil, percent, nil, ef.jokers)
                    if percent then percent = percent+percent_delta end
                end
            end
        end
    end
end
'''
match_indent = true


# Post-round effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effects = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, after = true})"
position = "after"
payload = '''
if effects and effects.jokers and effects.jokers.joker_repetitions then
    rep_list = effects.jokers.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ef = eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, after = true, retrigger_joker = true})

                --Any Joker effects
                if ef.jokers then
                    card_eval_status_text(G.jokers.cards[i], 'jokers', nil, percent, nil, ef.jokers)
                    if percent then percent = percent+percent_delta end
                end
            end
        end
    end
end
'''
match_indent = true


# removing cards from a consumable
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.jokers.cards[i]:calculate_joker({remove_playing_cards = true, removed = destroyed_cards})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({remove_playing_cards = true, removed = destroyed_cards})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({remove_playing_cards = true, removed = destroyed_cards, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# selling self
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self:calculate_joker{selling_self = true}"
position = "at"
payload = '''
local effects = self:calculate_joker{selling_self = true}
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                self:calculate_joker{selling_self = true, retrigger_joker = true}
            end
        end
    end
end
'''
match_indent = true


# opening packs
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.jokers.cards[i]:calculate_joker({open_booster = true, card = self})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({open_booster = true, card = self})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({open_booster = true, card = self, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# buying card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.jokers.cards[i]:calculate_joker({buying_card = true, card = self})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({buying_card = true, card = self})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({buying_card = true, card = self, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# first hand drawn
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.jokers.cards[i]:calculate_joker({first_hand_drawn = true})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({first_hand_drawn = true})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({first_hand_drawn = true, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# using a consumable
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({using_consumeable = true, consumeable = card})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({using_consumeable = true, consumeable = card})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({using_consumeable = true, consumeable = card, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# selling a card
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({selling_card = true, card = card})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({selling_card = true, card = card})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({selling_card = true, card = card, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# buying itself
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.E_MANAGER:add_event(Event({func = function() c1:calculate_joker({buying_card = true, card = c1}) return true end}))"
position = "at"
payload = '''
G.E_MANAGER:add_event(Event({func = function()
local effects = c1:calculate_joker({buying_card = true, card = c1})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                c1:calculate_joker({buying_card = true, card = c1, retrigger_joker = true})
            end
        end
    end
end
return true end}))
'''
match_indent = true


# buying a card
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({buying_card = true, card = c1})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({buying_card = true, card = c1})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({buying_card = true, card = c1, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# ending shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({ending_shop = true})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({ending_shop = true})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({ending_shop = true, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# skipping booster
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({skipping_booster = true})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({skipping_booster = true})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({skipping_booster = true, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# skipping blind
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({skip_blind = true})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({skip_blind = true})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({skip_blind = true, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# rerolling shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.jokers.cards[i]:calculate_joker({reroll_shop = true})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({reroll_shop = true})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({reroll_shop = true, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# playing card added
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.jokers.cards[i]:calculate_joker({playing_card_added = true, cards = cards})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({playing_card_added = true, cards = cards})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({playing_card_added = true, cards = cards, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# end of round
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "eval = G.jokers.cards[i]:calculate_joker({end_of_round = true, game_over = game_over})"
position = "after"
payload = '''
if eval and eval.joker_repetitions then
    rep_list = eval.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ev = G.jokers.cards[i]:calculate_joker({end_of_round = true, game_over = game_over, retrigger_joker = true})
                if ev then
                    if ev.saved then
                        game_over = false
                    end
                    card_eval_status_text(G.jokers.cards[i], 'jokers', nil, nil, nil, ev)
                end
            end
        end
    end
end
'''
match_indent = true


# end of round
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = G.jokers.cards[k]:calculate_joker({cardarea = G.hand, other_card = G.hand.cards[i], individual = true, end_of_round = true})"
position = "after"
payload = '''
if eval and eval.joker_repetitions then
    rep_list = eval.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                local ev = G.jokers.cards[k]:calculate_joker({cardarea = G.hand, other_card = G.hand.cards[i], individual = true, end_of_round = true, retrigger_joker = true})
                if ev then
                    table.insert(effects, rep_list[z])
                    table.insert(effects, ev)
                end
            end
        end
    end
end
'''
match_indent = true


# setting blind
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.jokers.cards[i]:calculate_joker({setting_blind = true, blind = G.GAME.round_resets.blind})"
position = "at"
payload = '''
local effects = G.jokers.cards[i]:calculate_joker({setting_blind = true, blind = G.GAME.round_resets.blind})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[i]:calculate_joker({setting_blind = true, blind = G.GAME.round_resets.blind, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# on pre-discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.jokers.cards[j]:calculate_joker({pre_discard = true, full_hand = G.hand.highlighted, hook = hook})"
position = "at"
payload = '''
local effects = G.jokers.cards[j]:calculate_joker({pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
if effects and effects.joker_repetitions then
    rep_list = effects.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[j]:calculate_joker({pre_discard = true, full_hand = G.hand.highlighted, hook = hook, retrigger_joker = true})
            end
        end
    end
end
'''
match_indent = true


# on discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "eval = G.jokers.cards[j]:calculate_joker({discard = true, other_card =  G.hand.highlighted[i], full_hand = G.hand.highlighted})"
position = "after"
payload = '''
if eval and eval.joker_repetitions then
    rep_list = eval.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ev = G.jokers.cards[j]:calculate_joker({discard = true, other_card =  G.hand.highlighted[i], full_hand = G.hand.highlighted, retrigger_joker = true})
                if ev then
                    if ev.remove then removed = true end
                    card_eval_status_text(G.jokers.cards[j], 'jokers', nil, 1, nil, ev)
                end
            end
        end
    end
end
'''
match_indent = true


# more hand effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = G.jokers.cards[k]:calculate_joker({cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = scoring_hand[i], individual = true})"
position = "after"
payload = '''
if eval and eval.joker_repetitions then
    rep_list = eval.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                local ev = G.jokers.cards[k]:calculate_joker({cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = scoring_hand[i], individual = true, retrigger_joker = true})
                if ev then
                    mod_percent = true
                    table.insert(effects, ev)
                    effects[#effects].from_retrigger = rep_list[z]
                end
            end
        end
    end
end
'''
match_indent = true


# retrigger effect

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "--calculate the card edition effects"
position = "before"
payload = '''
if effects[ii].from_retrigger then
    card_eval_status_text(effects[ii].from_retrigger.card, 'jokers', nil, nil, nil, effects[ii].from_retrigger)
end
'''
match_indent = true


# more hand effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local eval = G.jokers.cards[k]:calculate_joker({cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = G.hand.cards[i], individual = true})"
position = "after"
payload = '''
if eval and eval.joker_repetitions then
    rep_list = eval.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                local ev = G.jokers.cards[k]:calculate_joker({cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = G.hand.cards[i], individual = true, retrigger_joker = true})
                if ev then
                    mod_percent = true
                    table.insert(effects, ev)
                    table.insert(effects, rep_list[z])
                end
            end
        end
    end
end
'''
match_indent = true


# joker on joker effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effect = v:calculate_joker{full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_joker = _card}"
position = "after"
payload = '''
if effect and effect.joker_repetitions then
    rep_list = effect.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ef = v:calculate_joker{full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_joker = _card, retrigger_joker = true}
                if ef then
                    local extras = {mult = false, hand_chips = false}
                    if ef.mult_mod then mult = mod_mult(mult + ef.mult_mod);extras.mult = true end
                    if ef.chip_mod then hand_chips = mod_chips(hand_chips + ef.chip_mod);extras.hand_chips = true end
                    if ef.Xmult_mod then mult = mod_mult(mult*ef.Xmult_mod);extras.mult = true  end
                    if ef.Emult_mod then mult = mod_mult(mult^ef.Emult_mod);extras.mult = true  end
                    if ef.EEmult_mod then mult = mod_mult(mult:arrow(2, ef.EEmult_mod));extras.mult = true  end
                    if ef.EEEmult_mod then mult = mod_mult(mult:arrow(3, ef.EEEmult_mod));extras.mult = true  end
                    if ef.Hmult_mod and type(ef.Hmult) == 'table' then mult = mod_mult(mult:arrow(ef.Hmult_mod[1], ef.Hmult_mod[2]));extras.mult = true  end
                    if ef.Xchip_mod then hand_chips = mod_chips(hand_chips*ef.Xchip_mod);extras.hand_chips = true  end
                    if ef.Echip_mod then hand_chips = mod_chips(hand_chips^ef.Echip_mod);extras.hand_chips = true  end
                    if ef.EEchip_mod then hand_chips = mod_chips(hand_chips:arrow(2, ef.EEchip_mod));extras.hand_chips = true  end
                    if ef.EEEchip_mod then hand_chips = mod_chips(hand_chips:arrow(3, ef.EEEchip_mod));extras.hand_chips = true  end
                    if ef.Hchip_mod and type(ef.Hchip_mod) == 'table' then hand_chips = mod_chips(hand_chips:arrow(ef.Hchip_mod[1], ef.Hchip_mod[2]));extras.hand_chips = true  end
                    if extras.mult or extras.hand_chips then update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult}) end
                    if extras.mult or extras.hand_chips then card_eval_status_text(v, 'jokers', nil, percent, nil, ef) end
                    --Exponentia
                    if ef.Xmult_mod and next(find_joker("cry-Exponentia")) then
                        for _, v in pairs(find_joker("cry-Exponentia")) do
                            v.ability.extra.Emult = v.ability.extra.Emult + v.ability.extra.Emult_mod
                            card_eval_status_text(v, 'extra', nil, nil, nil, {message = "^"..v.ability.extra.Emult.." Mult"})
                        end
                    end
                    percent = percent+percent_delta
                end
            end
        end
    end
end
'''
match_indent = true


# more card destroying
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effect = v:calculate_joker{full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_joker = _card}"
position = "after"
payload = '''
if effect and effect.joker_repetitions then
    rep_list = effect.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                local ef = v:calculate_joker{full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_joker = _card, retrigger_joker = true}
                if ef then
                    local extras = {mult = false, hand_chips = false}
                    if ef.mult_mod then mult = mod_mult(mult + ef.mult_mod);extras.mult = true end
                    if ef.chip_mod then hand_chips = mod_chips(hand_chips + ef.chip_mod);extras.hand_chips = true end
                    if ef.Xmult_mod then mult = mod_mult(mult*ef.Xmult_mod);extras.mult = true  end
                    if ef.Emult_mod then mult = mod_mult(mult^ef.Emult_mod);extras.mult = true  end
                    if ef.EEmult_mod then mult = mod_mult(mult:arrow(2, ef.EEmult_mod));extras.mult = true  end
                    if ef.EEEmult_mod then mult = mod_mult(mult:arrow(3, ef.EEEmult_mod));extras.mult = true  end
                    if ef.Hmult_mod and type(ef.Hmult) == 'table' then mult = mod_mult(mult:arrow(ef.Hmult_mod[1], ef.Hmult_mod[2]));extras.mult = true  end
                    if ef.Xchip_mod then hand_chips = mod_chips(hand_chips*ef.Xchip_mod);extras.hand_chips = true  end
                    if ef.Echip_mod then hand_chips = mod_chips(hand_chips^ef.Echip_mod);extras.hand_chips = true  end
                    if ef.EEchip_mod then hand_chips = mod_chips(hand_chips:arrow(2, ef.EEchip_mod));extras.hand_chips = true  end
                    if ef.EEEchip_mod then hand_chips = mod_chips(hand_chips:arrow(3, ef.EEEchip_mod));extras.hand_chips = true  end
                    if ef.Hchip_mod and type(ef.Hchip_mod) == 'table' then hand_chips = mod_chips(hand_chips:arrow(ef.Hchip_mod[1], ef.Hchip_mod[2]));extras.hand_chips = true  end
                    if extras.mult or extras.hand_chips then update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult}) end
                    if extras.mult or extras.hand_chips then card_eval_status_text(v, 'jokers', nil, percent, nil, ef) end
                    --Exponentia
                    if ef.Xmult_mod and next(find_joker("cry-Exponentia")) then
                        for _, v in pairs(find_joker("cry-Exponentia")) do
                            v.ability.extra.Emult = v.ability.extra.Emult + v.ability.extra.Emult_mod
                            card_eval_status_text(v, 'extra', nil, nil, nil, {message = "^"..v.ability.extra.Emult.." Mult"})
                        end
                    end
                    percent = percent+percent_delta
                end
            end
        end
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "card_eval_status_text((reps[j].jokers or reps[j].seals).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals))"
position = "after"
payload = '''
if reps[j].from_retrigger then
    card_eval_status_text(reps[j].from_retrigger.card, 'jokers', nil, nil, nil, reps[j].from_retrigger)
end
'''
match_indent = true


# destroyed card effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "destroyed = G.jokers.cards[j]:calculate_joker({destroying_card = scoring_hand[i], full_hand = G.play.cards})"
position = "after"
payload = '''
if destroyed and destroyed.joker_repetitions then
    rep_list = destroyed.joker_repetitions
    for z=1, #rep_list do
        if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
            for r=1, rep_list[z].repetitions do
                card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                if percent then percent = percent+percent_delta end
                G.jokers.cards[j]:calculate_joker({destroying_card = scoring_hand[i], full_hand = G.play.cards})
            end
        end
    end
end
'''
match_indent = true
